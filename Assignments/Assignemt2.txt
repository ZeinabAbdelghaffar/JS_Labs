# Abstract Classes and Interfaces in JavaScript

## Abstract Classes

### Purpose:

- Establish a blueprint for subclasses to inherit from.
- Enforce a shared structure and common functionality.
- Prevent direct instantiation.

### Key Features:

- Declared using the `abstract` keyword.
- Cannot be instantiated directly.
- May contain abstract methods (without implementation).
- May contain concrete methods (with implementation).
- Allow for protected members (accessible within the class and its subclasses).

### Example:

```javascript
abstract class Animal {
    abstract makeSound(): void;

    protected age: number = 0;

    growOlder(): void {
        this.age++;
    }
}


# Interface

## Purpose

The Flyable interface is designed to define a contract that classes must adhere to. Its primary objectives are:

- To specify the structure and methods that implementing classes must provide.

## Key Features

- **Defined using the interface keyword.**
- **Cannot be instantiated.**
- **Contains only method signatures (no implementation).**
- **Can be implemented by multiple classes.**

## Example

```javascript
interface Flyable {
    fly(): void;
}


## Key Differences

### Feature Comparison: Abstract Classes vs. Interfaces

| Feature               | Abstract Classes                               | Interfaces                                     |
|-----------------------|------------------------------------------------|------------------------------------------------|
| **Instantiation**     | Cannot be instantiated directly                | Cannot be instantiated                         |
| **Implementation**    | Can have concrete methods                      | Contain only method signatures                 |
| **Inheritance**       | Subclasses can inherit from one abstract class | Classes can implement multiple interfaces      |
| **Protected Members** | Allow for protected members                    | No protected members                           |

### When to Use Each:

#### Abstract Classes:

- When you need to enforce a shared structure and functionality among subclasses.
- When you want to prevent direct instantiation of a base class.

#### Interfaces:

- When you need to define a contract that multiple classes can implement, regardless of their inheritance hierarchy.
- When you want to decouple classes from concrete implementations.

### Advanced Applications:

- **Dependency Injection:** Interfaces can be used to specify dependencies for classes, enabling cleaner and more flexible injection of different implementations.
- **Mixins:** Abstract classes can be used as mixins to share common functionality among unrelated classes.
- **Type Checking (TypeScript):** Both abstract classes and interfaces play a crucial role in TypeScript for static type checking, ensuring code correctness and improving developer experience.
- **Visibility:** Both abstract classes and interfaces can contain public methods. Abstract classes also allow for protected members, accessible within the class and its subclasses, offering an intermediate level of visibility.
- **Code Organization:** Abstract classes help define an inheritance hierarchy with specialized subclasses. Interfaces allow for horizontal connections between classes through shared contracts, promoting modularity.
- **Complexity:** Abstractions can add complexity to your code. Use them thoughtfully, considering readability and maintainability.
